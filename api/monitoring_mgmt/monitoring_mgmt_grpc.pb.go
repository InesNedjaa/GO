// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/monitoring_mgmt/monitoring_mgmt.proto

package monitoring_mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitoringMgmt_GetMetrics_FullMethodName = "/Monitoring_mgmt/GetMetrics"
	MonitoringMgmt_GetLogs_FullMethodName    = "/Monitoring_mgmt/GetLogs"
)

// MonitoringMgmtClient is the client API for MonitoringMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringMgmtClient interface {
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogResponse], error)
}

type monitoringMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringMgmtClient(cc grpc.ClientConnInterface) MonitoringMgmtClient {
	return &monitoringMgmtClient{cc}
}

func (c *monitoringMgmtClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, MonitoringMgmt_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringMgmtClient) GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MonitoringMgmt_ServiceDesc.Streams[0], MonitoringMgmt_GetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogsRequest, LogResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringMgmt_GetLogsClient = grpc.ServerStreamingClient[LogResponse]

// MonitoringMgmtServer is the server API for MonitoringMgmt service.
// All implementations must embed UnimplementedMonitoringMgmtServer
// for forward compatibility.
type MonitoringMgmtServer interface {
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	GetLogs(*LogsRequest, grpc.ServerStreamingServer[LogResponse]) error
	mustEmbedUnimplementedMonitoringMgmtServer()
}

// UnimplementedMonitoringMgmtServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringMgmtServer struct{}

func (UnimplementedMonitoringMgmtServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMonitoringMgmtServer) GetLogs(*LogsRequest, grpc.ServerStreamingServer[LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedMonitoringMgmtServer) mustEmbedUnimplementedMonitoringMgmtServer() {}
func (UnimplementedMonitoringMgmtServer) testEmbeddedByValue()                        {}

// UnsafeMonitoringMgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringMgmtServer will
// result in compilation errors.
type UnsafeMonitoringMgmtServer interface {
	mustEmbedUnimplementedMonitoringMgmtServer()
}

func RegisterMonitoringMgmtServer(s grpc.ServiceRegistrar, srv MonitoringMgmtServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringMgmtServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringMgmt_ServiceDesc, srv)
}

func _MonitoringMgmt_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringMgmtServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringMgmt_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringMgmtServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringMgmt_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringMgmtServer).GetLogs(m, &grpc.GenericServerStream[LogsRequest, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringMgmt_GetLogsServer = grpc.ServerStreamingServer[LogResponse]

// MonitoringMgmt_ServiceDesc is the grpc.ServiceDesc for MonitoringMgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringMgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Monitoring_mgmt",
	HandlerType: (*MonitoringMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _MonitoringMgmt_GetMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _MonitoringMgmt_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/monitoring_mgmt/monitoring_mgmt.proto",
}
