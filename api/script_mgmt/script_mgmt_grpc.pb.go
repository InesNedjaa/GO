// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/script_mgmt/script_mgmt.proto

package script_mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Script_Mgmt_ScheduleScript_FullMethodName = "/Script_Mgmt/ScheduleScript"
)

// Script_MgmtClient is the client API for Script_Mgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Script_MgmtClient interface {
	ScheduleScript(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
}

type script_MgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewScript_MgmtClient(cc grpc.ClientConnInterface) Script_MgmtClient {
	return &script_MgmtClient{cc}
}

func (c *script_MgmtClient) ScheduleScript(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, Script_Mgmt_ScheduleScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Script_MgmtServer is the server API for Script_Mgmt service.
// All implementations must embed UnimplementedScript_MgmtServer
// for forward compatibility.
type Script_MgmtServer interface {
	ScheduleScript(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	mustEmbedUnimplementedScript_MgmtServer()
}

// UnimplementedScript_MgmtServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScript_MgmtServer struct{}

func (UnimplementedScript_MgmtServer) ScheduleScript(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleScript not implemented")
}
func (UnimplementedScript_MgmtServer) mustEmbedUnimplementedScript_MgmtServer() {}
func (UnimplementedScript_MgmtServer) testEmbeddedByValue()                     {}

// UnsafeScript_MgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Script_MgmtServer will
// result in compilation errors.
type UnsafeScript_MgmtServer interface {
	mustEmbedUnimplementedScript_MgmtServer()
}

func RegisterScript_MgmtServer(s grpc.ServiceRegistrar, srv Script_MgmtServer) {
	// If the following call pancis, it indicates UnimplementedScript_MgmtServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Script_Mgmt_ServiceDesc, srv)
}

func _Script_Mgmt_ScheduleScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Script_MgmtServer).ScheduleScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Script_Mgmt_ScheduleScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Script_MgmtServer).ScheduleScript(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Script_Mgmt_ServiceDesc is the grpc.ServiceDesc for Script_Mgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Script_Mgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Script_Mgmt",
	HandlerType: (*Script_MgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleScript",
			Handler:    _Script_Mgmt_ScheduleScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/script_mgmt/script_mgmt.proto",
}
