// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/sysupdates/oob-connector.proto

package sysupdates

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Power_Mgmt_PowerOn_FullMethodName  = "/Power_Mgmt/PowerOn"
	Power_Mgmt_PowerOff_FullMethodName = "/Power_Mgmt/PowerOff"
	Power_Mgmt_Rebot_FullMethodName    = "/Power_Mgmt/Rebot"
)

// Power_MgmtClient is the client API for Power_Mgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Power_MgmtClient interface {
	PowerOn(ctx context.Context, in *PowerOnDeviceRequest, opts ...grpc.CallOption) (*PowerDeviceResponse, error)
	PowerOff(ctx context.Context, in *PowerDeviceRequest, opts ...grpc.CallOption) (*PowerDeviceResponse, error)
	Rebot(ctx context.Context, in *PowerDeviceRequest, opts ...grpc.CallOption) (*PowerDeviceResponse, error)
}

type power_MgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewPower_MgmtClient(cc grpc.ClientConnInterface) Power_MgmtClient {
	return &power_MgmtClient{cc}
}

func (c *power_MgmtClient) PowerOn(ctx context.Context, in *PowerOnDeviceRequest, opts ...grpc.CallOption) (*PowerDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PowerDeviceResponse)
	err := c.cc.Invoke(ctx, Power_Mgmt_PowerOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *power_MgmtClient) PowerOff(ctx context.Context, in *PowerDeviceRequest, opts ...grpc.CallOption) (*PowerDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PowerDeviceResponse)
	err := c.cc.Invoke(ctx, Power_Mgmt_PowerOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *power_MgmtClient) Rebot(ctx context.Context, in *PowerDeviceRequest, opts ...grpc.CallOption) (*PowerDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PowerDeviceResponse)
	err := c.cc.Invoke(ctx, Power_Mgmt_Rebot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Power_MgmtServer is the server API for Power_Mgmt service.
// All implementations must embed UnimplementedPower_MgmtServer
// for forward compatibility.
type Power_MgmtServer interface {
	PowerOn(context.Context, *PowerOnDeviceRequest) (*PowerDeviceResponse, error)
	PowerOff(context.Context, *PowerDeviceRequest) (*PowerDeviceResponse, error)
	Rebot(context.Context, *PowerDeviceRequest) (*PowerDeviceResponse, error)
	mustEmbedUnimplementedPower_MgmtServer()
}

// UnimplementedPower_MgmtServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPower_MgmtServer struct{}

func (UnimplementedPower_MgmtServer) PowerOn(context.Context, *PowerOnDeviceRequest) (*PowerDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOn not implemented")
}
func (UnimplementedPower_MgmtServer) PowerOff(context.Context, *PowerDeviceRequest) (*PowerDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOff not implemented")
}
func (UnimplementedPower_MgmtServer) Rebot(context.Context, *PowerDeviceRequest) (*PowerDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebot not implemented")
}
func (UnimplementedPower_MgmtServer) mustEmbedUnimplementedPower_MgmtServer() {}
func (UnimplementedPower_MgmtServer) testEmbeddedByValue()                    {}

// UnsafePower_MgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Power_MgmtServer will
// result in compilation errors.
type UnsafePower_MgmtServer interface {
	mustEmbedUnimplementedPower_MgmtServer()
}

func RegisterPower_MgmtServer(s grpc.ServiceRegistrar, srv Power_MgmtServer) {
	// If the following call pancis, it indicates UnimplementedPower_MgmtServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Power_Mgmt_ServiceDesc, srv)
}

func _Power_Mgmt_PowerOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOnDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Power_MgmtServer).PowerOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Power_Mgmt_PowerOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Power_MgmtServer).PowerOn(ctx, req.(*PowerOnDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Power_Mgmt_PowerOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Power_MgmtServer).PowerOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Power_Mgmt_PowerOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Power_MgmtServer).PowerOff(ctx, req.(*PowerDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Power_Mgmt_Rebot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Power_MgmtServer).Rebot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Power_Mgmt_Rebot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Power_MgmtServer).Rebot(ctx, req.(*PowerDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Power_Mgmt_ServiceDesc is the grpc.ServiceDesc for Power_Mgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Power_Mgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Power_Mgmt",
	HandlerType: (*Power_MgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PowerOn",
			Handler:    _Power_Mgmt_PowerOn_Handler,
		},
		{
			MethodName: "PowerOff",
			Handler:    _Power_Mgmt_PowerOff_Handler,
		},
		{
			MethodName: "Rebot",
			Handler:    _Power_Mgmt_Rebot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sysupdates/oob-connector.proto",
}

const (
	Script_Mgmt_ScheduleScript_FullMethodName = "/Script_Mgmt/ScheduleScript"
)

// Script_MgmtClient is the client API for Script_Mgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Script_MgmtClient interface {
	ScheduleScript(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
}

type script_MgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewScript_MgmtClient(cc grpc.ClientConnInterface) Script_MgmtClient {
	return &script_MgmtClient{cc}
}

func (c *script_MgmtClient) ScheduleScript(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, Script_Mgmt_ScheduleScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Script_MgmtServer is the server API for Script_Mgmt service.
// All implementations must embed UnimplementedScript_MgmtServer
// for forward compatibility.
type Script_MgmtServer interface {
	ScheduleScript(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	mustEmbedUnimplementedScript_MgmtServer()
}

// UnimplementedScript_MgmtServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScript_MgmtServer struct{}

func (UnimplementedScript_MgmtServer) ScheduleScript(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleScript not implemented")
}
func (UnimplementedScript_MgmtServer) mustEmbedUnimplementedScript_MgmtServer() {}
func (UnimplementedScript_MgmtServer) testEmbeddedByValue()                     {}

// UnsafeScript_MgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Script_MgmtServer will
// result in compilation errors.
type UnsafeScript_MgmtServer interface {
	mustEmbedUnimplementedScript_MgmtServer()
}

func RegisterScript_MgmtServer(s grpc.ServiceRegistrar, srv Script_MgmtServer) {
	// If the following call pancis, it indicates UnimplementedScript_MgmtServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Script_Mgmt_ServiceDesc, srv)
}

func _Script_Mgmt_ScheduleScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Script_MgmtServer).ScheduleScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Script_Mgmt_ScheduleScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Script_MgmtServer).ScheduleScript(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Script_Mgmt_ServiceDesc is the grpc.ServiceDesc for Script_Mgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Script_Mgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Script_Mgmt",
	HandlerType: (*Script_MgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleScript",
			Handler:    _Script_Mgmt_ScheduleScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sysupdates/oob-connector.proto",
}

const (
	MonitoringMgmt_GetMetrics_FullMethodName = "/Monitoring_mgmt/GetMetrics"
	MonitoringMgmt_GetLogs_FullMethodName    = "/Monitoring_mgmt/GetLogs"
)

// MonitoringMgmtClient is the client API for MonitoringMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringMgmtClient interface {
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type monitoringMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringMgmtClient(cc grpc.ClientConnInterface) MonitoringMgmtClient {
	return &monitoringMgmtClient{cc}
}

func (c *monitoringMgmtClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, MonitoringMgmt_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringMgmtClient) GetLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, MonitoringMgmt_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringMgmtServer is the server API for MonitoringMgmt service.
// All implementations must embed UnimplementedMonitoringMgmtServer
// for forward compatibility.
type MonitoringMgmtServer interface {
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	GetLogs(context.Context, *LogsRequest) (*LogResponse, error)
	mustEmbedUnimplementedMonitoringMgmtServer()
}

// UnimplementedMonitoringMgmtServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringMgmtServer struct{}

func (UnimplementedMonitoringMgmtServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMonitoringMgmtServer) GetLogs(context.Context, *LogsRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedMonitoringMgmtServer) mustEmbedUnimplementedMonitoringMgmtServer() {}
func (UnimplementedMonitoringMgmtServer) testEmbeddedByValue()                        {}

// UnsafeMonitoringMgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringMgmtServer will
// result in compilation errors.
type UnsafeMonitoringMgmtServer interface {
	mustEmbedUnimplementedMonitoringMgmtServer()
}

func RegisterMonitoringMgmtServer(s grpc.ServiceRegistrar, srv MonitoringMgmtServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringMgmtServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringMgmt_ServiceDesc, srv)
}

func _MonitoringMgmt_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringMgmtServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringMgmt_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringMgmtServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringMgmt_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringMgmtServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringMgmt_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringMgmtServer).GetLogs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringMgmt_ServiceDesc is the grpc.ServiceDesc for MonitoringMgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringMgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Monitoring_mgmt",
	HandlerType: (*MonitoringMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _MonitoringMgmt_GetMetrics_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _MonitoringMgmt_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sysupdates/oob-connector.proto",
}
